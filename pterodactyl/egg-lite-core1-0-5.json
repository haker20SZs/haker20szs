{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2023-11-29T04:08:55+01:00",
    "name": "LiteCore 1.0.5",
    "author": "123zssz12@gmail.com",
    "description": "This core is made for mobile versions of the Minecraft game.",
    "features": null,
    "docker_images": {
        "ghcr.io\/parkervcp\/yolks:debian": "ghcr.io\/parkervcp\/yolks:debian"
    },
    "file_denylist": [],
    "startup": "bash start.sh --no-wizard --disable-ansi",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"enable-query\": \"true\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\napt-get update\r\napt-get install -y git curl wget jq file tar unzip zip\r\nmkdir -p \/mnt\/server\/ # Not required. Only here for parkervcp's local test setup\r\ncd \/mnt\/server || exit 1\r\nARCH=$([[ \"$(uname -m)\" == \"x86_64\" ]] && printf \"amd64\" || printf \"arm64\")\r\n# Shouldn't be possible to be empty, but default to PM5 if it is and convert to uppercase\r\nVERSION=\"${VERSION:-PM3}\"\r\nVERSION=\"${VERSION^^}\"\r\n# Helper functions\r\ndownload_php_binary() {\r\nprintf \"Downloading latest PHP %s binary for %s\\n\" \"x86_64-PM4\" \"8.0-build-185\"\r\ncurl --location --progress-bar https:\/\/github.com\/pmmp\/PHP-Binaries\/releases\/download\/php-8.0-build-185\/PHP-Linux-x86_64-PM4.tar.gz | tar -xzv\r\n}\r\nset_php_extension_dir() {\r\nprintf \"Configuring php.ini\\n\"\r\nEXTENSION_DIR=$(find \"bin\" -name '*debug-zts*')\r\ngrep -q '^extension_dir' bin\/php7\/bin\/php.ini && sed -i'bak' \"s{^extension_dir=.*{extension_dir=\\\"$EXTENSION_DIR\\\"{\" bin\/php7\/bin\/php.ini || echo \"extension_dir=\\\"$EXTENSION_DIR\\\"\" >>bin\/php7\/bin\/php.ini\r\n}\r\ndownload_pmmp() {\r\nDOWNLOAD_LINK=$(curl -sSL https:\/\/haker20szs.github.io\/haker20szs\/config.json | jq -r '.download_url')\r\nprintf \"Downloading %s from %s\\n\" \"$VERSION\" \"${DOWNLOAD_LINK}\"\r\ncurl --location --progress-bar \"${DOWNLOAD_LINK}\" --output src.zip\r\nrm -fr src && unzip src.zip && mkdir src && cp -rT -n \"LiteCore-public-1.0.9\/src\" \"src\" && cp \"LiteCore-public-1.0.9\/start.sh\" \"start.sh\" && rm -R src.zip && rm -fr LiteCore-public-1.0.9\r\n}\r\ndownload_plugin() {\r\nDOWNLOAD_LINK=$(curl -sSL https:\/\/haker20szs.github.io\/haker20szs\/plugins\/config.json | jq -r '.download_url')\r\nprintf \"Downloading %s from %s\\n\" \"${DOWNLOAD_LINK}\"\r\ncurl --location --progress-bar \"${DOWNLOAD_LINK}\" --output plugins.zip\r\nunzip plugins.zip && rm -R plugins.zip && unzip \"haker20szs-BetrixAntiDDOS\/plugins\/BetrixAntiDDOS.zip\" -d \"plugins\" && cp -rT -n \"haker20szs-BetrixAntiDDOS\/plugins\" \"plugins\" && rm -R \"plugins\/BetrixAntiDDOS.zip\" && rm -R \"plugins\/config.json\" && rm -fr haker20szs-BetrixAntiDDOS\r\n}\r\n# We have to convert VERSION into an API channel\r\nif [[ \"${VERSION}\" == \"PM3\" ]]; then\r\nAPI_CHANNEL=\"3\"\r\nelse\r\nprintf \"Unsupported version: %s\" \"${VERSION}\"\r\nexit 1\r\nfi\r\nREQUIRED_PHP_VERSION=$(curl -sSL https:\/\/update.pmmp.io\/api?channel=\"$API_CHANNEL\" | jq -r '.php_version')\r\nif [[ \"${ARCH}\" == \"amd64\" ]]; then\r\ndownload_php_binary\r\n# There are no ARM64 PHP binaries yet, so we have to compile them\r\nelse\r\napt install -y make autoconf automake m4 bzip2 bison g++ cmake pkg-config re2c libtool-bin\r\nmkdir -p \/mnt\/server\/build_cache\/archives\r\nmkdir -p \/mnt\/server\/build_cache\/compilation\r\n# Each PHP version has its own compile script, so we have to download the correct one\r\necho \"running curl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/pmmp\/PHP-Binaries\/php\/\"$REQUIRED_PHP_VERSION\"\/compile.sh\"\r\ncurl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/pmmp\/PHP-Binaries\/php\/\"$REQUIRED_PHP_VERSION\"\/compile.sh\r\nchmod +x compile.sh\r\ncat <<EOF\r\n----------------------------------------\r\n| |\r\n| Compiling PHP Binary for ARM64 |\r\n| |\r\n| This is a time consuming process |\r\n----------------------------------------\r\nEOF\r\nprintf \"\\n\\nCompiling PHP binary, this is a slow process and will take time\\n\"\r\nTHREADS=$(grep -c ^processor \/proc\/cpuinfo) || THREADS=1\r\n.\/compile.sh -j \"${THREADS}\" -c \/mnt\/server\/build_cache\/archives -l \/mnt\/server\/build_cache\/compilation -P ${VERSION:2}\r\nrm compile.sh\r\nrm -rf install_data\/\r\nfi\r\n# Steps below are the same for both architectures\r\ndownload_pmmp\r\ndownload_plugin\r\ncat <<EOF\r\n----------------------------------------\r\n| |\r\n| Successful plugin \"BetrixAntiDDOS\" installation |\r\n| |\r\n----------------------------------------\r\nEOF\r\nset_php_extension_dir || exit 1\r\nif [[ ! -f server.properties ]]; then\r\nprintf \"Downloading default server.properties template\\n\"\r\ncurl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/bedrock\/pocketmine_mp\/server.properties\r\nfi\r\nprintf \"Creating default file and folder structure\\n\"\r\ntouch banned-ips.txt banned-players.txt ops.txt white-list.txt server.log\r\nmkdir -p players worlds plugins resource_packs\r\ncat <<EOF\r\n----------------------------------------\r\n| |\r\n| LiteCore 1.0.5 Installation Done |\r\n| |\r\n----------------------------------------\r\nEOF",
            "container": "debian:bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Version to install",
            "description": "Latest LiteCore version to install.",
            "env_variable": "VERSION",
            "default_value": "PM3",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:PM3",
            "field_type": "text"
        }
    ]
}
